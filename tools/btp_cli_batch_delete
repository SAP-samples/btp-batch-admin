#!/bin/bash
#set -x #echo on
#set +x #echo off
do_echo=1 # Echo the commands
#do_echo=0 # Don't echo the commands
#do_run=1 # Execute(evaluate) the commands
do_run=0 # Don't evaluate any commands : can be overridden with -f
do_btp_stuff=1 #Requires current btp login
do_entitle_stuff=1 #Requires current btp login
do_perm_stuff=1 #Requires mitmproxy in "Ready for Batch Operations!" state
do_cf_stuff=1 #Requires current cf login
force=$2

#GLOBAL VALUES
globalacctsubdomain="partner-eng"
mtaname=acc
hanacloudspaceguid="d096c374-91ef-4e57-aef6-8088384b9bc0"
hanaclouddbinstguid="ffa845c4-c70e-4774-ba37-c0a6fdf16850"

if [ "$#" -eq 2 ]; then
  if [ $force == "-f" ]; then
    do_run=1
    echo ""
    echo "Forcing command execution"
    echo ""
  fi
fi

orgcnt=0
START="$(date +%s)"

while read orgspace
do

first=1
IFS=':'     # colon (:) is set as delimiter
read -ra ADDR <<< "$orgspace"   # str is read into an array as tokens separated by IFS
for i in "${ADDR[@]}"; do   # access each element of array
    #echo "$i"
    #echo $first
    if [ $first -eq 1 ]; then
	    first=0
	    org=$i
    else
	    first=1
	    space=$i
    fi
done
IFS=' '     # reset to default value after usage

echo "================================================"

if [ $do_cf_stuff -eq 1 ]; then 

echo ""
cmd='cf target -o '$org' -s '$space
if [ $do_echo -eq 1 ]; then echo $cmd; fi
if [ $do_run -eq 1 ]; then eval $cmd; fi

echo ""
echo Undeploying $mtaname from $org $space

cmd='cf undeploy '$mtaname' -f --delete-services'
if [ $do_echo -eq 1 ]; then echo $cmd; fi
if [ $do_run -eq 1 ]; then eval $cmd; fi

fi

if [ $do_perm_stuff -eq 1 ]; then 
echo ""
echo "Removing HANA Instance Sharing permissions"

cmd='lastmappingid=$(curl https://hana-cockpit.cfapps.us21.hana.ondemand.com/hana-inventory/sap/hana/cloud/inventory/api/v1/spaces/'$hanacloudspaceguid'/hana/'$hanaclouddbinstguid'/mappings -x localhost:8080 --silent --location --insecure --request GET --header '"'"'Accept: application/json'"'"' | jq '"'"'.mappings[] | select(.organization_name == "'$org'") | .id'"'"' | tr -ds '"'"'"'"'"' '"'"''"'"')'
if [ $do_echo -eq 1 ]; then echo $cmd; fi
eval $cmd

cmd='lastorgid=$(curl https://hana-cockpit.cfapps.us21.hana.ondemand.com/hana-inventory/sap/hana/cloud/inventory/api/v1/spaces/'$hanacloudspaceguid'/hana/'$hanaclouddbinstguid'/mappings -x localhost:8080 --silent --location --insecure --request GET --header '"'"'Accept: application/json'"'"' | jq '"'"'.mappings[] | select(.organization_name == "'$org'") | .organization_guid'"'"' | tr -ds '"'"'"'"'"' '"'"''"'"')'
if [ $do_echo -eq 1 ]; then echo $cmd; fi
eval $cmd

cmd='lastspaceid=$(curl https://hana-cockpit.cfapps.us21.hana.ondemand.com/hana-inventory/sap/hana/cloud/inventory/api/v1/spaces/'$hanacloudspaceguid'/hana/'$hanaclouddbinstguid'/mappings -x localhost:8080 --silent --location --insecure --request GET --header '"'"'Accept: application/json'"'"' | jq '"'"'.mappings[] | select(.organization_name == "'$org'") | .space_guid'"'"' | tr -ds '"'"'"'"'"' '"'"''"'"')'
if [ $do_echo -eq 1 ]; then echo $cmd; fi
eval $cmd

#cmd='lastguid=$(curl $accountsurlcen/accounts/v1/subaccounts --silent --location --insecure --request POST --header '"'"'Content-Type: application/json'"'"' --header '"'"'Accept: application/json'"'"' --header '"'"'Authorization: Bearer '"'"'$bearercen --data-raw '"'"'{"betaEnabled": true, "customProperties": [ { "key": "creator", "value": "'$btpuser'" } ], "description": "Subaccount created via API", "displayName": "'$org'", "parentGUID": "'"'"'$globalacctguid'"'"'", "region": "us21", "subaccountAdmins": [ "andrew.lunde@sap.com" ], "subdomain": "viaapi'$orgcnt'", "usedForProductionSetting": "USED_FOR_PRODUCTION"}'"'"' | jq .guid | tr -ds '"'"'"'"'"' '"'"''"'"')'
cmd='delmappingresult=$(curl https://hana-cockpit.cfapps.us21.hana.ondemand.com/hana-inventory/sap/hana/cloud/inventory/api/v1/organizations/'$lastorgid'/spaces/'$lastspaceid'/hana/'$hanaclouddbinstguid'/mappings/'$hanacloudspaceguid' -x localhost:8080 --silent --location --insecure --request DELETE --header '"'"'Content-Type: application/json'"'"')'
if [ $do_echo -eq 1 ]; then echo $cmd; fi
if [ $do_run -eq 1 ]; then eval $cmd; fi

fi

if [ $do_btp_stuff -eq 1 ]; then 
echo ""
echo "Getting SubAccount : $org "
#              btp --format json list accounts/subaccount --global-account partner-eng | jq '.value[] | select(.displayName == "PEAHCM") | .subdomain' | tr -ds '"' ''
cmd='lastsubguid=$(btp --format json list accounts/subaccount --global-account partner-eng | jq '"'"'.value[] | select(.displayName == "'$org'") | .guid'"'"' | tr -ds '"'"'"'"'"' '"'"''"'"')'
if [ $do_echo -eq 1 ]; then echo $cmd; fi
eval $cmd

# De-entitle
cmd='btp --format json assign accounts/entitlement --global-account '$globalacctsubdomain' --to-subaccount '$lastsubguid' --for-service hana --plan schema'
if [ $do_echo -eq 1 ]; then echo $cmd; fi
if [ $do_run -eq 1 ]; then eval $cmd; fi

cmd='btp --format json assign accounts/entitlement --global-account '$globalacctsubdomain' --to-subaccount '$lastsubguid' --for-service APPLICATION_RUNTIME --plan MEMORY --amount 0'
if [ $do_echo -eq 1 ]; then echo $cmd; fi
if [ $do_run -eq 1 ]; then eval $cmd; fi

# Disable CloudFoundry

cmd='lastenvguid=$(btp --format json list accounts/environment-instance --subaccount '$lastsubguid' | jq '"'"'.environmentInstances[] | select(.environmentType == "cloudfoundry") | .id'"'"' | tr -ds '"'"'"'"'"' '"'"''"'"')'
if [ $do_echo -eq 1 ]; then echo $cmd; fi
eval $cmd
echo ""

cmd='status=$(btp --format json delete accounts/environment-instance '$lastenvguid' --subaccount '$lastsubguid' --confirm | jq '"'"'.status'"'"' | tr -ds '"'"'"'"'"' '"'"''"'"')'
if [ $do_echo -eq 1 ]; then echo $cmd; fi
if [ $do_run -eq 1 ]; then eval $cmd; fi
echo ""

if [ $do_run -eq 1 ]; then 
  status=INIT
  while [ $status != "Processed" ] && [ $lastenvguid != "null" ]; do
    echo "Status is "$status
    sleep 2
    cmd='status=$(btp --format json  get accounts/environment-instance '$lastenvguid' --subaccount '$lastsubguid' | jq .status | tr -ds '"'"'"'"'"' '"'"''"'"')'
    if [ $do_echo -eq 1 ]; then echo $cmd; fi
    if [ $do_run -eq 1 ]; then eval $cmd; fi
  done
fi


echo ""
echo "Deleting SubAccount : $org "

#lastsubguid=$(btp --format json list accounts/subaccount --global-account partner-eng | jq '.value[] | select(.displayName == "PEAHCM") | .guid' | tr -ds '"' ''

cmd='delsubguid=$(btp --format json delete accounts/subaccount '$lastsubguid' --global-account partner-eng --confirm | jq .guid | tr -ds '"'"'"'"'"' '"'"''"'"')'
if [ $do_echo -eq 1 ]; then echo $cmd; fi
if [ $do_run -eq 1 ]; then eval $cmd; fi
echo ""

echo "Deleting Subaccount = "$delsubguid

if [ $do_run -eq 1 ]; then 
  state=INIT
  while [ $state != "null" ] && [ $delsubguid != "null" ]; do
    echo "State is "$state
    sleep 2
    cmd='state=$(btp --format json get accounts/subaccount '$lastsubguid' | jq .state | tr -ds '"'"'"'"'"' '"'"''"'"')'
    if [ $do_echo -eq 1 ]; then echo $cmd; fi
    if [ $do_run -eq 1 ]; then eval $cmd; fi
  done
fi

fi

((orgcnt++))

done < $1

DURATION=$[ $(date +%s) - ${START} ]

echo $orgcnt orgs processed in ${DURATION} seconds = $(( ${DURATION} / $orgcnt )) secs/org